{
  "Resources": {
    "DataBucketecommercestream6E44AD6B": {
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Metadata": {
        "aws:cdk:path": "KinesisEcomStack/DataBucket-ecommerce-stream/Resource"
      }
    },
    "EcommerceDataStream9EBC75C9": {
      "Type": "AWS::Kinesis::Stream",
      "Properties": {
        "Name": "ecommerce-raw-user-activity-stream",
        "RetentionPeriodHours": 24,
        "ShardCount": 1,
        "StreamEncryption": {
          "Fn::If": [
            "AwsCdkKinesisEncryptedStreamsUnsupportedRegions",
            {
              "Ref": "AWS::NoValue"
            },
            {
              "EncryptionType": "KMS",
              "KeyId": "alias/aws/kinesis"
            }
          ]
        }
      },
      "Metadata": {
        "aws:cdk:path": "KinesisEcomStack/EcommerceDataStream/Resource"
      }
    },
    "Vpc8378EB38": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "10.0.0.0/16",
        "EnableDnsHostnames": true,
        "EnableDnsSupport": true,
        "InstanceTenancy": "default",
        "Tags": [
          {
            "Key": "Name",
            "Value": "KinesisEcomStack/Vpc"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "KinesisEcomStack/Vpc/Resource"
      }
    },
    "VpcPublicSubnet1Subnet5C2D37C4": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": "us-east-1a",
        "CidrBlock": "10.0.0.0/18",
        "MapPublicIpOnLaunch": true,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Public"
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public"
          },
          {
            "Key": "Name",
            "Value": "KinesisEcomStack/Vpc/PublicSubnet1"
          }
        ],
        "VpcId": {
          "Ref": "Vpc8378EB38"
        }
      },
      "Metadata": {
        "aws:cdk:path": "KinesisEcomStack/Vpc/PublicSubnet1/Subnet"
      }
    },
    "VpcPublicSubnet1RouteTable6C95E38E": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "KinesisEcomStack/Vpc/PublicSubnet1"
          }
        ],
        "VpcId": {
          "Ref": "Vpc8378EB38"
        }
      },
      "Metadata": {
        "aws:cdk:path": "KinesisEcomStack/Vpc/PublicSubnet1/RouteTable"
      }
    },
    "VpcPublicSubnet1RouteTableAssociation97140677": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcPublicSubnet1RouteTable6C95E38E"
        },
        "SubnetId": {
          "Ref": "VpcPublicSubnet1Subnet5C2D37C4"
        }
      },
      "Metadata": {
        "aws:cdk:path": "KinesisEcomStack/Vpc/PublicSubnet1/RouteTableAssociation"
      }
    },
    "VpcPublicSubnet1DefaultRoute3DA9E72A": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "VpcIGWD7BA715C"
        },
        "RouteTableId": {
          "Ref": "VpcPublicSubnet1RouteTable6C95E38E"
        }
      },
      "DependsOn": [
        "VpcVPCGWBF912B6E"
      ],
      "Metadata": {
        "aws:cdk:path": "KinesisEcomStack/Vpc/PublicSubnet1/DefaultRoute"
      }
    },
    "VpcPublicSubnet1EIPD7E02669": {
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc",
        "Tags": [
          {
            "Key": "Name",
            "Value": "KinesisEcomStack/Vpc/PublicSubnet1"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "KinesisEcomStack/Vpc/PublicSubnet1/EIP"
      }
    },
    "VpcPublicSubnet1NATGateway4D7517AA": {
      "Type": "AWS::EC2::NatGateway",
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": [
            "VpcPublicSubnet1EIPD7E02669",
            "AllocationId"
          ]
        },
        "SubnetId": {
          "Ref": "VpcPublicSubnet1Subnet5C2D37C4"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "KinesisEcomStack/Vpc/PublicSubnet1"
          }
        ]
      },
      "DependsOn": [
        "VpcPublicSubnet1DefaultRoute3DA9E72A",
        "VpcPublicSubnet1RouteTableAssociation97140677"
      ],
      "Metadata": {
        "aws:cdk:path": "KinesisEcomStack/Vpc/PublicSubnet1/NATGateway"
      }
    },
    "VpcPublicSubnet2Subnet691E08A3": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": "us-east-1b",
        "CidrBlock": "10.0.64.0/18",
        "MapPublicIpOnLaunch": true,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Public"
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public"
          },
          {
            "Key": "Name",
            "Value": "KinesisEcomStack/Vpc/PublicSubnet2"
          }
        ],
        "VpcId": {
          "Ref": "Vpc8378EB38"
        }
      },
      "Metadata": {
        "aws:cdk:path": "KinesisEcomStack/Vpc/PublicSubnet2/Subnet"
      }
    },
    "VpcPublicSubnet2RouteTable94F7E489": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "KinesisEcomStack/Vpc/PublicSubnet2"
          }
        ],
        "VpcId": {
          "Ref": "Vpc8378EB38"
        }
      },
      "Metadata": {
        "aws:cdk:path": "KinesisEcomStack/Vpc/PublicSubnet2/RouteTable"
      }
    },
    "VpcPublicSubnet2RouteTableAssociationDD5762D8": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcPublicSubnet2RouteTable94F7E489"
        },
        "SubnetId": {
          "Ref": "VpcPublicSubnet2Subnet691E08A3"
        }
      },
      "Metadata": {
        "aws:cdk:path": "KinesisEcomStack/Vpc/PublicSubnet2/RouteTableAssociation"
      }
    },
    "VpcPublicSubnet2DefaultRoute97F91067": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "VpcIGWD7BA715C"
        },
        "RouteTableId": {
          "Ref": "VpcPublicSubnet2RouteTable94F7E489"
        }
      },
      "DependsOn": [
        "VpcVPCGWBF912B6E"
      ],
      "Metadata": {
        "aws:cdk:path": "KinesisEcomStack/Vpc/PublicSubnet2/DefaultRoute"
      }
    },
    "VpcPublicSubnet2EIP3C605A87": {
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc",
        "Tags": [
          {
            "Key": "Name",
            "Value": "KinesisEcomStack/Vpc/PublicSubnet2"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "KinesisEcomStack/Vpc/PublicSubnet2/EIP"
      }
    },
    "VpcPublicSubnet2NATGateway9182C01D": {
      "Type": "AWS::EC2::NatGateway",
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": [
            "VpcPublicSubnet2EIP3C605A87",
            "AllocationId"
          ]
        },
        "SubnetId": {
          "Ref": "VpcPublicSubnet2Subnet691E08A3"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "KinesisEcomStack/Vpc/PublicSubnet2"
          }
        ]
      },
      "DependsOn": [
        "VpcPublicSubnet2DefaultRoute97F91067",
        "VpcPublicSubnet2RouteTableAssociationDD5762D8"
      ],
      "Metadata": {
        "aws:cdk:path": "KinesisEcomStack/Vpc/PublicSubnet2/NATGateway"
      }
    },
    "VpcPrivateSubnet1Subnet536B997A": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": "us-east-1a",
        "CidrBlock": "10.0.128.0/18",
        "MapPublicIpOnLaunch": false,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Private"
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Private"
          },
          {
            "Key": "Name",
            "Value": "KinesisEcomStack/Vpc/PrivateSubnet1"
          }
        ],
        "VpcId": {
          "Ref": "Vpc8378EB38"
        }
      },
      "Metadata": {
        "aws:cdk:path": "KinesisEcomStack/Vpc/PrivateSubnet1/Subnet"
      }
    },
    "VpcPrivateSubnet1RouteTableB2C5B500": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "KinesisEcomStack/Vpc/PrivateSubnet1"
          }
        ],
        "VpcId": {
          "Ref": "Vpc8378EB38"
        }
      },
      "Metadata": {
        "aws:cdk:path": "KinesisEcomStack/Vpc/PrivateSubnet1/RouteTable"
      }
    },
    "VpcPrivateSubnet1RouteTableAssociation70C59FA6": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcPrivateSubnet1RouteTableB2C5B500"
        },
        "SubnetId": {
          "Ref": "VpcPrivateSubnet1Subnet536B997A"
        }
      },
      "Metadata": {
        "aws:cdk:path": "KinesisEcomStack/Vpc/PrivateSubnet1/RouteTableAssociation"
      }
    },
    "VpcPrivateSubnet1DefaultRouteBE02A9ED": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": {
          "Ref": "VpcPublicSubnet1NATGateway4D7517AA"
        },
        "RouteTableId": {
          "Ref": "VpcPrivateSubnet1RouteTableB2C5B500"
        }
      },
      "Metadata": {
        "aws:cdk:path": "KinesisEcomStack/Vpc/PrivateSubnet1/DefaultRoute"
      }
    },
    "VpcPrivateSubnet2Subnet3788AAA1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": "us-east-1b",
        "CidrBlock": "10.0.192.0/18",
        "MapPublicIpOnLaunch": false,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Private"
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Private"
          },
          {
            "Key": "Name",
            "Value": "KinesisEcomStack/Vpc/PrivateSubnet2"
          }
        ],
        "VpcId": {
          "Ref": "Vpc8378EB38"
        }
      },
      "Metadata": {
        "aws:cdk:path": "KinesisEcomStack/Vpc/PrivateSubnet2/Subnet"
      }
    },
    "VpcPrivateSubnet2RouteTableA678073B": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "KinesisEcomStack/Vpc/PrivateSubnet2"
          }
        ],
        "VpcId": {
          "Ref": "Vpc8378EB38"
        }
      },
      "Metadata": {
        "aws:cdk:path": "KinesisEcomStack/Vpc/PrivateSubnet2/RouteTable"
      }
    },
    "VpcPrivateSubnet2RouteTableAssociationA89CAD56": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcPrivateSubnet2RouteTableA678073B"
        },
        "SubnetId": {
          "Ref": "VpcPrivateSubnet2Subnet3788AAA1"
        }
      },
      "Metadata": {
        "aws:cdk:path": "KinesisEcomStack/Vpc/PrivateSubnet2/RouteTableAssociation"
      }
    },
    "VpcPrivateSubnet2DefaultRoute060D2087": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": {
          "Ref": "VpcPublicSubnet2NATGateway9182C01D"
        },
        "RouteTableId": {
          "Ref": "VpcPrivateSubnet2RouteTableA678073B"
        }
      },
      "Metadata": {
        "aws:cdk:path": "KinesisEcomStack/Vpc/PrivateSubnet2/DefaultRoute"
      }
    },
    "VpcIGWD7BA715C": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "KinesisEcomStack/Vpc"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "KinesisEcomStack/Vpc/IGW"
      }
    },
    "VpcVPCGWBF912B6E": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "InternetGatewayId": {
          "Ref": "VpcIGWD7BA715C"
        },
        "VpcId": {
          "Ref": "Vpc8378EB38"
        }
      },
      "Metadata": {
        "aws:cdk:path": "KinesisEcomStack/Vpc/VPCGW"
      }
    },
    "VpcRestrictDefaultSecurityGroupCustomResourceC73DA2BE": {
      "Type": "Custom::VpcRestrictDefaultSG",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "CustomVpcRestrictDefaultSGCustomResourceProviderHandlerDC833E5E",
            "Arn"
          ]
        },
        "DefaultSecurityGroupId": {
          "Fn::GetAtt": [
            "Vpc8378EB38",
            "DefaultSecurityGroup"
          ]
        },
        "Account": "143176219551"
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Metadata": {
        "aws:cdk:path": "KinesisEcomStack/Vpc/RestrictDefaultSecurityGroupCustomResource/Default"
      }
    },
    "CustomVpcRestrictDefaultSGCustomResourceProviderRole26592FE0": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ]
        },
        "ManagedPolicyArns": [
          {
            "Fn::Sub": "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
          }
        ],
        "Policies": [
          {
            "PolicyName": "Inline",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "ec2:AuthorizeSecurityGroupIngress",
                    "ec2:AuthorizeSecurityGroupEgress",
                    "ec2:RevokeSecurityGroupIngress",
                    "ec2:RevokeSecurityGroupEgress"
                  ],
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:ec2:us-east-1:143176219551:security-group/",
                          {
                            "Fn::GetAtt": [
                              "Vpc8378EB38",
                              "DefaultSecurityGroup"
                            ]
                          }
                        ]
                      ]
                    }
                  ]
                }
              ]
            }
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "KinesisEcomStack/Custom::VpcRestrictDefaultSGCustomResourceProvider/Role"
      }
    },
    "CustomVpcRestrictDefaultSGCustomResourceProviderHandlerDC833E5E": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "cdk-hnb659fds-assets-143176219551-us-east-1",
          "S3Key": "ee7de53d64cc9d6248fa6aa550f92358f6c907b5efd6f3298aeab1b5e7ea358a.zip"
        },
        "Timeout": 900,
        "MemorySize": 128,
        "Handler": "__entrypoint__.handler",
        "Role": {
          "Fn::GetAtt": [
            "CustomVpcRestrictDefaultSGCustomResourceProviderRole26592FE0",
            "Arn"
          ]
        },
        "Runtime": "nodejs18.x",
        "Description": "Lambda function for removing all inbound/outbound rules from the VPC default security group"
      },
      "DependsOn": [
        "CustomVpcRestrictDefaultSGCustomResourceProviderRole26592FE0"
      ],
      "Metadata": {
        "aws:cdk:path": "KinesisEcomStack/Custom::VpcRestrictDefaultSGCustomResourceProvider/Handler",
        "aws:asset:path": "asset.ee7de53d64cc9d6248fa6aa550f92358f6c907b5efd6f3298aeab1b5e7ea358a",
        "aws:asset:property": "Code"
      }
    },
    "InstanceRole3CCE2F1D": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ec2.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/AmazonS3FullAccess"
              ]
            ]
          },
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/AmazonKinesisFullAccess"
              ]
            ]
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "KinesisEcomStack/InstanceRole/Resource"
      }
    },
    "SecurityGroupDD263621": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Allow SSH access",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1"
          }
        ],
        "SecurityGroupIngress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow SSH access",
            "FromPort": 22,
            "IpProtocol": "tcp",
            "ToPort": 22
          }
        ],
        "VpcId": {
          "Ref": "Vpc8378EB38"
        }
      },
      "Metadata": {
        "aws:cdk:path": "KinesisEcomStack/SecurityGroup/Resource"
      }
    },
    "InstanceInstanceProfileAB5AEF02": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Roles": [
          {
            "Ref": "InstanceRole3CCE2F1D"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "KinesisEcomStack/Instance/InstanceProfile"
      }
    },
    "InstanceC1063A87": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "AvailabilityZone": "us-east-1a",
        "IamInstanceProfile": {
          "Ref": "InstanceInstanceProfileAB5AEF02"
        },
        "ImageId": {
          "Ref": "SsmParameterValueawsserviceamiamazonlinuxlatestamzn2amihvmx8664gp2C96584B6F00A464EAD1953AFF4B05118Parameter"
        },
        "InstanceType": "t2.micro",
        "KeyName": "momo",
        "SecurityGroupIds": [
          {
            "Fn::GetAtt": [
              "SecurityGroupDD263621",
              "GroupId"
            ]
          }
        ],
        "SubnetId": {
          "Ref": "VpcPublicSubnet1Subnet5C2D37C4"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "KinesisEcomStack/Instance"
          }
        ],
        "UserData": {
          "Fn::Base64": "#!/bin/bash\n#!/bin/bash\nexec > /home/ec2-user/user-data.log 2>&1\necho \"Starting user data script execution...\"\n\nyum update -y\nyum install -y python3\npip3 install boto3 || echo 'boto3 is already installed.'\n\nwhile true; do\n    if aws s3 ls \"s3://kinesis-stream-files-ecommerce/stream-data-app-simulation.py\"; then\n        break\n    fi\n    sleep 10\ndone\n\naws s3 cp \"s3://kinesis-stream-files-ecommerce/stream-data-app-simulation.py\" /home/ec2-user/stream-data-app-simulation.py\n\nchmod +x /home/ec2-user/stream-data-app-simulation.py\n\nexport S3_BUCKET=\"kinesis-stream-files-ecommerce\"\nexport S3_KEY=\"2019-Nov-sample.csv\"\nexport KINESIS_STREAM_NAME=\"ecommerce-raw-user-activity-stream\"\n\necho \"Running the Python script...\"\npython3 /home/ec2-user/stream-data-app-simulation.py > /home/ec2-user/script.log 2>&1\n"
        }
      },
      "DependsOn": [
        "InstanceRole3CCE2F1D"
      ],
      "Metadata": {
        "aws:cdk:path": "KinesisEcomStack/Instance/Resource"
      }
    },
    "UserActivityTableC1B8BF25": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "user_id",
            "AttributeType": "S"
          },
          {
            "AttributeName": "txn_timestamp",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "user_id",
            "KeyType": "HASH"
          },
          {
            "AttributeName": "txn_timestamp",
            "KeyType": "RANGE"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 5,
          "WriteCapacityUnits": 5
        }
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Metadata": {
        "aws:cdk:path": "KinesisEcomStack/UserActivityTable/Resource"
      }
    },
    "ClickstreamAnalyticsTopicB39D7954": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "DisplayName": "Clickstream Analytics"
      },
      "Metadata": {
        "aws:cdk:path": "KinesisEcomStack/ClickstreamAnalyticsTopic/Resource"
      }
    },
    "ClickstreamAnalyticsTopicmrox165321gmailcom7BBDCC5D": {
      "Type": "AWS::SNS::Subscription",
      "Properties": {
        "Endpoint": "mrox165321@gmail.com",
        "Protocol": "email",
        "TopicArn": {
          "Ref": "ClickstreamAnalyticsTopicB39D7954"
        }
      },
      "Metadata": {
        "aws:cdk:path": "KinesisEcomStack/ClickstreamAnalyticsTopic/mrox165321@gmail.com/Resource"
      }
    },
    "DataStreamProcessorServiceRole19E4BAD5": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "KinesisEcomStack/DataStreamProcessor/ServiceRole/Resource"
      }
    },
    "DataStreamProcessorServiceRoleDefaultPolicy591712F3": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:ConditionCheckItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable",
                "dynamodb:GetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:PutItem",
                "dynamodb:Query",
                "dynamodb:Scan",
                "dynamodb:UpdateItem"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "UserActivityTableC1B8BF25",
                    "Arn"
                  ]
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            {
              "Action": "sns:Publish",
              "Effect": "Allow",
              "Resource": {
                "Ref": "ClickstreamAnalyticsTopicB39D7954"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "DataStreamProcessorServiceRoleDefaultPolicy591712F3",
        "Roles": [
          {
            "Ref": "DataStreamProcessorServiceRole19E4BAD5"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "KinesisEcomStack/DataStreamProcessor/ServiceRole/DefaultPolicy/Resource"
      }
    },
    "DataStreamProcessor8C39E9C4": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "cdk-hnb659fds-assets-143176219551-us-east-1",
          "S3Key": "d54bcbb2ae9ba8fe188a544979d3724e0f6ae4289f71191f94a187b77dd76fb1.zip"
        },
        "Environment": {
          "Variables": {
            "TABLE_NAME": {
              "Ref": "UserActivityTableC1B8BF25"
            },
            "SNS_TOPIC_ARN": {
              "Ref": "ClickstreamAnalyticsTopicB39D7954"
            }
          }
        },
        "Handler": "processor.lambda_handler",
        "MemorySize": 256,
        "Role": {
          "Fn::GetAtt": [
            "DataStreamProcessorServiceRole19E4BAD5",
            "Arn"
          ]
        },
        "Runtime": "python3.8",
        "Timeout": 300
      },
      "DependsOn": [
        "DataStreamProcessorServiceRoleDefaultPolicy591712F3",
        "DataStreamProcessorServiceRole19E4BAD5"
      ],
      "Metadata": {
        "aws:cdk:path": "KinesisEcomStack/DataStreamProcessor/Resource",
        "aws:asset:path": "asset.d54bcbb2ae9ba8fe188a544979d3724e0f6ae4289f71191f94a187b77dd76fb1",
        "aws:asset:is-bundled": false,
        "aws:asset:property": "Code"
      }
    },
    "DataStreamProcessorFirehoseInvocationA01FE7E0": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "DataStreamProcessor8C39E9C4",
            "Arn"
          ]
        },
        "Principal": "firehose.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "MyDeliveryStream",
            "Arn"
          ]
        }
      },
      "Metadata": {
        "aws:cdk:path": "KinesisEcomStack/DataStreamProcessor/FirehoseInvocation"
      }
    },
    "MyGlueDatabase": {
      "Type": "AWS::Glue::Database",
      "Properties": {
        "CatalogId": "143176219551",
        "DatabaseInput": {
          "Name": "my_glue_database"
        }
      },
      "Metadata": {
        "aws:cdk:path": "KinesisEcomStack/MyGlueDatabase"
      }
    },
    "MyGlueTable": {
      "Type": "AWS::Glue::Table",
      "Properties": {
        "CatalogId": "143176219551",
        "DatabaseName": {
          "Ref": "MyGlueDatabase"
        },
        "TableInput": {
          "Name": "my_glue_table",
          "StorageDescriptor": {
            "Columns": [
              {
                "Name": "event_time",
                "Type": "string"
              },
              {
                "Name": "event_type",
                "Type": "string"
              },
              {
                "Name": "product_id",
                "Type": "string"
              },
              {
                "Name": "category_id",
                "Type": "string"
              },
              {
                "Name": "category_code",
                "Type": "string"
              },
              {
                "Name": "brand",
                "Type": "string"
              },
              {
                "Name": "price",
                "Type": "string"
              },
              {
                "Name": "user_id",
                "Type": "string"
              },
              {
                "Name": "user_session",
                "Type": "string"
              },
              {
                "Name": "txn_timestamp",
                "Type": "string"
              }
            ],
            "InputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat",
            "Location": {
              "Fn::Join": [
                "",
                [
                  "s3://",
                  {
                    "Ref": "DataBucketecommercestream6E44AD6B"
                  },
                  "/processed-data/"
                ]
              ]
            },
            "OutputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat",
            "SerdeInfo": {
              "SerializationLibrary": "org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe"
            }
          },
          "TableType": "EXTERNAL_TABLE"
        }
      },
      "Metadata": {
        "aws:cdk:path": "KinesisEcomStack/MyGlueTable"
      }
    },
    "FirehoseRoleAA67C190": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "firehose.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/AmazonS3FullAccess"
              ]
            ]
          },
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/AWSLambda_FullAccess"
              ]
            ]
          },
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/AmazonKinesisFullAccess"
              ]
            ]
          },
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/AmazonKinesisFirehoseFullAccess"
              ]
            ]
          },
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/AWSGlueConsoleFullAccess"
              ]
            ]
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "KinesisEcomStack/FirehoseRole/Resource"
      }
    },
    "MyDeliveryStream": {
      "Type": "AWS::KinesisFirehose::DeliveryStream",
      "Properties": {
        "DeliveryStreamType": "KinesisStreamAsSource",
        "ExtendedS3DestinationConfiguration": {
          "BucketARN": {
            "Fn::GetAtt": [
              "DataBucketecommercestream6E44AD6B",
              "Arn"
            ]
          },
          "BufferingHints": {
            "IntervalInSeconds": 30,
            "SizeInMBs": 64
          },
          "CompressionFormat": "UNCOMPRESSED",
          "DataFormatConversionConfiguration": {
            "Enabled": true,
            "InputFormatConfiguration": {
              "Deserializer": {
                "HiveJsonSerDe": {}
              }
            },
            "OutputFormatConfiguration": {
              "Serializer": {
                "ParquetSerDe": {}
              }
            },
            "SchemaConfiguration": {
              "DatabaseName": {
                "Ref": "MyGlueDatabase"
              },
              "Region": "us-east-1",
              "RoleARN": {
                "Fn::GetAtt": [
                  "FirehoseRoleAA67C190",
                  "Arn"
                ]
              },
              "TableName": "my_glue_table"
            }
          },
          "ErrorOutputPrefix": "error-data/",
          "Prefix": "processed-data/",
          "ProcessingConfiguration": {
            "Enabled": true,
            "Processors": [
              {
                "Parameters": [
                  {
                    "ParameterName": "LambdaArn",
                    "ParameterValue": {
                      "Fn::GetAtt": [
                        "DataStreamProcessor8C39E9C4",
                        "Arn"
                      ]
                    }
                  }
                ],
                "Type": "Lambda"
              }
            ]
          },
          "RoleARN": {
            "Fn::GetAtt": [
              "FirehoseRoleAA67C190",
              "Arn"
            ]
          }
        },
        "KinesisStreamSourceConfiguration": {
          "KinesisStreamARN": {
            "Fn::GetAtt": [
              "EcommerceDataStream9EBC75C9",
              "Arn"
            ]
          },
          "RoleARN": {
            "Fn::GetAtt": [
              "FirehoseRoleAA67C190",
              "Arn"
            ]
          }
        }
      },
      "Metadata": {
        "aws:cdk:path": "KinesisEcomStack/MyDeliveryStream"
      }
    },
    "ReportLambdaFunctionServiceRole24388AB1": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "KinesisEcomStack/ReportLambdaFunction/ServiceRole/Resource"
      }
    },
    "ReportLambdaFunctionServiceRoleDefaultPolicy140B5778": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "dynamodb:GetItem",
                "dynamodb:Query",
                "dynamodb:Scan",
                "s3:GetObject",
                "s3:ListBucket",
                "s3:PutObject"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "DataBucketecommercestream6E44AD6B",
                    "Arn"
                  ]
                },
                {
                  "Fn::GetAtt": [
                    "UserActivityTableC1B8BF25",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "DataBucketecommercestream6E44AD6B",
                          "Arn"
                        ]
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            },
            {
              "Action": "sns:Publish",
              "Effect": "Allow",
              "Resource": {
                "Ref": "ClickstreamAnalyticsTopicB39D7954"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "ReportLambdaFunctionServiceRoleDefaultPolicy140B5778",
        "Roles": [
          {
            "Ref": "ReportLambdaFunctionServiceRole24388AB1"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "KinesisEcomStack/ReportLambdaFunction/ServiceRole/DefaultPolicy/Resource"
      }
    },
    "ReportLambdaFunctionB2F2FC51": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "cdk-hnb659fds-assets-143176219551-us-east-1",
          "S3Key": "53e83b9e3d93a5e076fe358467c3152ee01c0b763e630195649200c4774cf5d7.zip"
        },
        "Environment": {
          "Variables": {
            "TABLE_NAME": {
              "Ref": "UserActivityTableC1B8BF25"
            },
            "S3_BUCKET": {
              "Ref": "DataBucketecommercestream6E44AD6B"
            },
            "SNS_TOPIC_ARN": {
              "Ref": "ClickstreamAnalyticsTopicB39D7954"
            }
          }
        },
        "Handler": "report_lambda.lambda_handler",
        "MemorySize": 256,
        "Role": {
          "Fn::GetAtt": [
            "ReportLambdaFunctionServiceRole24388AB1",
            "Arn"
          ]
        },
        "Runtime": "python3.8",
        "Timeout": 300
      },
      "DependsOn": [
        "ReportLambdaFunctionServiceRoleDefaultPolicy140B5778",
        "ReportLambdaFunctionServiceRole24388AB1"
      ],
      "Metadata": {
        "aws:cdk:path": "KinesisEcomStack/ReportLambdaFunction/Resource",
        "aws:asset:path": "asset.53e83b9e3d93a5e076fe358467c3152ee01c0b763e630195649200c4774cf5d7",
        "aws:asset:is-bundled": false,
        "aws:asset:property": "Code"
      }
    },
    "ReportAPID7E34DA3": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Description": "API Gateway for generating brand reports.",
        "Name": "ReportAPI"
      },
      "Metadata": {
        "aws:cdk:path": "KinesisEcomStack/ReportAPI/Resource"
      }
    },
    "ReportAPIDeploymentA2D56B288be73d240f3de3b879c6d9be9b70746d": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "Description": "API Gateway for generating brand reports.",
        "RestApiId": {
          "Ref": "ReportAPID7E34DA3"
        }
      },
      "DependsOn": [
        "ReportAPIreportPOST221CD2B3",
        "ReportAPIreport6D8A5950"
      ],
      "Metadata": {
        "aws:cdk:path": "KinesisEcomStack/ReportAPI/Deployment/Resource"
      }
    },
    "ReportAPIDeploymentStageprod7B41860C": {
      "Type": "AWS::ApiGateway::Stage",
      "Properties": {
        "DeploymentId": {
          "Ref": "ReportAPIDeploymentA2D56B288be73d240f3de3b879c6d9be9b70746d"
        },
        "RestApiId": {
          "Ref": "ReportAPID7E34DA3"
        },
        "StageName": "prod"
      },
      "Metadata": {
        "aws:cdk:path": "KinesisEcomStack/ReportAPI/DeploymentStage.prod/Resource"
      }
    },
    "ReportAPIreport6D8A5950": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ReportAPID7E34DA3",
            "RootResourceId"
          ]
        },
        "PathPart": "report",
        "RestApiId": {
          "Ref": "ReportAPID7E34DA3"
        }
      },
      "Metadata": {
        "aws:cdk:path": "KinesisEcomStack/ReportAPI/Default/report/Resource"
      }
    },
    "ReportAPIreportPOSTApiPermissionKinesisEcomStackReportAPIDFC6F6DCPOSTreportD5987E0F": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "ReportLambdaFunctionB2F2FC51",
            "Arn"
          ]
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:us-east-1:143176219551:",
              {
                "Ref": "ReportAPID7E34DA3"
              },
              "/",
              {
                "Ref": "ReportAPIDeploymentStageprod7B41860C"
              },
              "/POST/report"
            ]
          ]
        }
      },
      "Metadata": {
        "aws:cdk:path": "KinesisEcomStack/ReportAPI/Default/report/POST/ApiPermission.KinesisEcomStackReportAPIDFC6F6DC.POST..report"
      }
    },
    "ReportAPIreportPOSTApiPermissionTestKinesisEcomStackReportAPIDFC6F6DCPOSTreportD5460FA4": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "ReportLambdaFunctionB2F2FC51",
            "Arn"
          ]
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:us-east-1:143176219551:",
              {
                "Ref": "ReportAPID7E34DA3"
              },
              "/test-invoke-stage/POST/report"
            ]
          ]
        }
      },
      "Metadata": {
        "aws:cdk:path": "KinesisEcomStack/ReportAPI/Default/report/POST/ApiPermission.Test.KinesisEcomStackReportAPIDFC6F6DC.POST..report"
      }
    },
    "ReportAPIreportPOST221CD2B3": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "POST",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "RequestTemplates": {
            "application/json": "{ \"statusCode\": \"200\" }"
          },
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "ReportLambdaFunctionB2F2FC51",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "ResourceId": {
          "Ref": "ReportAPIreport6D8A5950"
        },
        "RestApiId": {
          "Ref": "ReportAPID7E34DA3"
        }
      },
      "Metadata": {
        "aws:cdk:path": "KinesisEcomStack/ReportAPI/Default/report/POST/Resource"
      }
    },
    "ReportAPIDeployment2EE65D1C87e20fe2eec3e222ab9270b018c4d115": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ReportAPID7E34DA3"
        }
      },
      "DependsOn": [
        "ReportAPIreportPOST221CD2B3"
      ],
      "Metadata": {
        "aws:cdk:path": "KinesisEcomStack/ReportAPIDeployment/Resource"
      }
    },
    "ReportAPIStage8E114FC7": {
      "Type": "AWS::ApiGateway::Stage",
      "Properties": {
        "DeploymentId": {
          "Ref": "ReportAPIDeployment2EE65D1C87e20fe2eec3e222ab9270b018c4d115"
        },
        "RestApiId": {
          "Ref": "ReportAPID7E34DA3"
        },
        "StageName": "prod2"
      },
      "Metadata": {
        "aws:cdk:path": "KinesisEcomStack/ReportAPIStage/Resource"
      }
    },
    "CDKMetadata": {
      "Type": "AWS::CDK::Metadata",
      "Properties": {
        "Analytics": "v2:deflate64:H4sIAAAAAAAA/22STW/bMAyGf0vvirY16IAe03QrcmhrJEWvBS0zCRdbMkQphWH4v1cfdpwCO/EhRVHkS93KX8s7+fMGPnmhqtOiplL2OwfqJELoo+el7B+8OqET670eKZsHYBzEiTQycbxkEZqYlWkQqG5l/96qGHsv1qLwZU1q50udq820Nd7hG5Q1zvE5tmI2isCR0ZfkCH82RTQv4J7A4Sd0orB0DjgX3miHNvCUkDsZvZULcx4b1E7sUHlLrnuyxreph2+BjWYHWmEumXkQBI3styY3PdnpuLBmTyFUmDBzejjTIKpOQ2OqoPNl4gSDYB10fDMtJckyhFlYWWqn6a/9QdTQlBXI/q/Xasq45gJtQ8wpl5cfwIyO5Soacag9yj4kPYKDMizzqpNxq3uyeDSMMmZhTWe03bhnaOmQZQwaILtVS0mGER+xrU2XtE13L174W4e85QQh33irMH6mizMWyvyM7miqGMo0DJFfvWt9qr02uqI073zdszPNf6t9PwpLOlOFNr2eVIldkT4k7cBCg+H/DKLowsv6x1Ley983/5hoYb121KDcZvsFmRH3K0cDAAA="
      },
      "Metadata": {
        "aws:cdk:path": "KinesisEcomStack/CDKMetadata/Default"
      }
    }
  },
  "Outputs": {
    "DataBucketecommercestreamName": {
      "Description": "The name of the S3 bucket for storing data and scripts.",
      "Value": {
        "Ref": "DataBucketecommercestream6E44AD6B"
      }
    },
    "KinesisDataStreamName": {
      "Description": "The name of the Kinesis data stream.",
      "Value": {
        "Ref": "EcommerceDataStream9EBC75C9"
      }
    },
    "UserActivityTableName": {
      "Description": "The name of the DynamoDB table for storing user activities.",
      "Value": {
        "Ref": "UserActivityTableC1B8BF25"
      }
    },
    "AlertTopicARN": {
      "Description": "The ARN of the SNS topic for DDoS alerts.",
      "Value": {
        "Ref": "ClickstreamAnalyticsTopicB39D7954"
      }
    },
    "ReportAPIEndpoint776B1774": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ReportAPID7E34DA3"
            },
            ".execute-api.us-east-1.",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/",
            {
              "Ref": "ReportAPIDeploymentStageprod7B41860C"
            },
            "/"
          ]
        ]
      }
    },
    "APIEndpoint": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ReportAPID7E34DA3"
            },
            ".execute-api.us-east-1.",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/",
            {
              "Ref": "ReportAPIDeploymentStageprod7B41860C"
            },
            "/report"
          ]
        ]
      }
    }
  },
  "Conditions": {
    "AwsCdkKinesisEncryptedStreamsUnsupportedRegions": {
      "Fn::Or": [
        {
          "Fn::Equals": [
            {
              "Ref": "AWS::Region"
            },
            "cn-north-1"
          ]
        },
        {
          "Fn::Equals": [
            {
              "Ref": "AWS::Region"
            },
            "cn-northwest-1"
          ]
        }
      ]
    }
  },
  "Parameters": {
    "SsmParameterValueawsserviceamiamazonlinuxlatestamzn2amihvmx8664gp2C96584B6F00A464EAD1953AFF4B05118Parameter": {
      "Type": "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>",
      "Default": "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2"
    },
    "BootstrapVersion": {
      "Type": "AWS::SSM::Parameter::Value<String>",
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
    }
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5"
                  ],
                  {
                    "Ref": "BootstrapVersion"
                  }
                ]
              }
            ]
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
        }
      ]
    }
  }
}
